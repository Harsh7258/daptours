1. GET METHOD basic structure --> 
// app.get('/', (req, res) => {
//     res.status(200).json({message:'Hello from the API!!', app: 'daptours'});
//     // in the format of json on the server.
// });
// get(read) request on the server on this URL '/'

2. POST METHOD basic structure --> 
// app.post('/', (req, res) => {
//     res.send('you can post to this endpoint...')
// });
// post(create) request on server on same URL '/'

3. FILE NAME
// server.js --> Test data schema for database
const testTour = new Tour({
    name: 'Primal Fear',
    rating: 9.0,
    price: 500
});

testTour.save().then(doc => {
    console.log(doc);
}).catch(err => {
    console.log('ERROR: ', err);
});

4. FILE NAME
// tourController.js --> module.createTour
    const fs = require('fs');

    // console.log(req.body);
    // res.send('done');

    const newId = tours[tours.length - 1].id + 1;
    const newTour = Object.assign({id: newId}, req.body);

    tours.push(newTour);

    fs.writeFile(`${__dirname}/dev-data/data/tours-simple.json`, JSON.stringify(tours), err => {
        res.status(201).json({
            status: 'success',
            data: {
                tour: newTour
            }
        });
    });

EXPLAINS HOW MIDDLEWARE FUNCTIONS WORKS FOR INVAILD ID --> 
exports.checkID = (req, res, next, val) => {
    // middleware
    console.log(`Tour id is: ${val}`);
    
    if(req.params.id * 1 > tours.length) {
        return res.status(404).json({
            status: 'Fail',
            message: 'Invalid ID'
        });
    };
    next(); // next --> used to becasue without it request response cycle will get stuck in this middleware fucntion
};

5. FILE NAME
// tourController --> checkBody Controller

exports.checkBody = (req, res, next) => {
    if(!req.body.name || !req.body.price) {
        return res.status(400).json({
            status: 'FAIL',
            message: 'Missing name or price'
        });
    };
    next();
};